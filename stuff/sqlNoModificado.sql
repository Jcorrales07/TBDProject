-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.ajuste
(
    id_ajuste integer NOT NULL DEFAULT nextval('ajuste_id_ajuste_seq'::regclass),
    fecha timestamp without time zone NOT NULL,
    comentario text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_ajuste PRIMARY KEY (id_ajuste)
);

COMMENT ON TABLE public.ajuste
    IS 'TRIAL';

COMMENT ON COLUMN public.ajuste.id_ajuste
    IS 'TRIAL';

COMMENT ON COLUMN public.ajuste.fecha
    IS 'TRIAL';

COMMENT ON COLUMN public.ajuste.comentario
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.cliente
(
    id_cliente integer NOT NULL DEFAULT nextval('cliente_id_cliente_seq'::regclass),
    nombre character varying(45) COLLATE pg_catalog."default" NOT NULL,
    apellido character varying(45) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_cliente PRIMARY KEY (id_cliente)
);

COMMENT ON TABLE public.cliente
    IS 'TRIAL';

COMMENT ON COLUMN public.cliente.id_cliente
    IS 'TRIAL';

COMMENT ON COLUMN public.cliente.nombre
    IS 'TRIAL';

COMMENT ON COLUMN public.cliente.apellido
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.compra
(
    id_compra integer NOT NULL,
    id_proveedor integer NOT NULL,
    fecha timestamp without time zone NOT NULL,
    proveedor_compra character varying(45) COLLATE pg_catalog."default" NOT NULL,
    total double precision NOT NULL,
    CONSTRAINT pk_compra PRIMARY KEY (id_compra)
);

COMMENT ON TABLE public.compra
    IS 'TRIAL';

COMMENT ON COLUMN public.compra.id_compra
    IS 'TRIAL';

COMMENT ON COLUMN public.compra.id_proveedor
    IS 'TRIAL';

COMMENT ON COLUMN public.compra.fecha
    IS 'TRIAL';

COMMENT ON COLUMN public.compra.proveedor_compra
    IS 'TRIAL';

COMMENT ON COLUMN public.compra.total
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.detalle_ajuste
(
    id_detalle_ajuste integer NOT NULL DEFAULT nextval('detalle_ajuste_id_detalle_ajuste_seq'::regclass),
    id_ajuste integer NOT NULL,
    producto character varying(45) COLLATE pg_catalog."default" NOT NULL,
    cantidad integer NOT NULL,
    costo double precision NOT NULL,
    subtotal double precision NOT NULL,
    CONSTRAINT pk_detalle_ajuste PRIMARY KEY (id_detalle_ajuste, id_ajuste)
);

COMMENT ON TABLE public.detalle_ajuste
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_ajuste.id_detalle_ajuste
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_ajuste.id_ajuste
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_ajuste.producto
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_ajuste.cantidad
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_ajuste.costo
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_ajuste.subtotal
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.detalle_compra
(
    id_detalle_compra integer NOT NULL DEFAULT nextval('detalle_compra_id_detalle_compra_seq'::regclass),
    id_compra integer NOT NULL,
    producto character varying(45) COLLATE pg_catalog."default" NOT NULL,
    cantidad integer NOT NULL,
    costo double precision NOT NULL,
    subtotal double precision NOT NULL,
    CONSTRAINT pk_detalle_compra PRIMARY KEY (id_detalle_compra, id_compra)
);

COMMENT ON TABLE public.detalle_compra
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_compra.id_detalle_compra
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_compra.id_compra
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_compra.producto
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_compra.cantidad
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_compra.costo
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_compra.subtotal
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.detalle_factura
(
    id_detalle_factura integer NOT NULL DEFAULT nextval('detalle_factura_id_detalle_factura_seq'::regclass),
    id_factura integer NOT NULL,
    producto_vendido character varying(45) COLLATE pg_catalog."default" NOT NULL,
    cantidad integer NOT NULL,
    precio double precision NOT NULL,
    subtotal double precision NOT NULL,
    CONSTRAINT pk_detalle_factura PRIMARY KEY (id_detalle_factura, id_factura)
);

COMMENT ON TABLE public.detalle_factura
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_factura.id_detalle_factura
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_factura.id_factura
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_factura.producto_vendido
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_factura.cantidad
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_factura.precio
    IS 'TRIAL';

COMMENT ON COLUMN public.detalle_factura.subtotal
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.factura
(
    id_factura integer NOT NULL DEFAULT nextval('factura_id_factura_seq'::regclass),
    id_cliente integer NOT NULL,
    fecha timestamp without time zone NOT NULL,
    subtotal double precision NOT NULL,
    impuesto double precision NOT NULL,
    descuento double precision NOT NULL,
    total double precision NOT NULL,
    CONSTRAINT pk_factura PRIMARY KEY (id_factura)
);

COMMENT ON TABLE public.factura
    IS 'TRIAL';

COMMENT ON COLUMN public.factura.id_factura
    IS 'TRIAL';

COMMENT ON COLUMN public.factura.id_cliente
    IS 'TRIAL';

COMMENT ON COLUMN public.factura.fecha
    IS 'TRIAL';

COMMENT ON COLUMN public.factura.subtotal
    IS 'TRIAL';

COMMENT ON COLUMN public.factura.impuesto
    IS 'TRIAL';

COMMENT ON COLUMN public.factura.descuento
    IS 'TRIAL';

COMMENT ON COLUMN public.factura.total
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.kardex
(
    id_kardex integer NOT NULL DEFAULT nextval('kardex_id_kardex_seq'::regclass),
    id_producto integer NOT NULL,
    usuario_editor character varying(50) COLLATE pg_catalog."default" NOT NULL,
    nombre_operacion character varying(45) COLLATE pg_catalog."default" NOT NULL,
    producto character varying(45) COLLATE pg_catalog."default" NOT NULL,
    cantidad integer NOT NULL,
    costo double precision NOT NULL,
    precio double precision NOT NULL,
    fecha timestamp without time zone NOT NULL,
    inventario_antes integer NOT NULL,
    inventario_despues integer NOT NULL,
    CONSTRAINT pk_kardex PRIMARY KEY (id_kardex)
);

COMMENT ON TABLE public.kardex
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.id_kardex
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.id_producto
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.usuario_editor
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.nombre_operacion
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.producto
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.cantidad
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.costo
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.precio
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.fecha
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.inventario_antes
    IS 'TRIAL';

COMMENT ON COLUMN public.kardex.inventario_despues
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.privilegio
(
    id_privilegio integer NOT NULL,
    id_kardex integer NOT NULL,
    nombre character varying(45) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_privilegio PRIMARY KEY (id_privilegio, id_kardex)
);

COMMENT ON TABLE public.privilegio
    IS 'TRIAL';

COMMENT ON COLUMN public.privilegio.id_privilegio
    IS 'TRIAL';

COMMENT ON COLUMN public.privilegio.id_kardex
    IS 'TRIAL';

COMMENT ON COLUMN public.privilegio.nombre
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.producto
(
    id_producto integer NOT NULL DEFAULT nextval('producto_id_producto_seq'::regclass),
    nombre character varying(45) COLLATE pg_catalog."default" NOT NULL,
    costo double precision NOT NULL,
    categoria character varying(45) COLLATE pg_catalog."default" NOT NULL,
    marca character varying(45) COLLATE pg_catalog."default" NOT NULL,
    precio double precision NOT NULL,
    existencia_min integer NOT NULL,
    existencia_max integer NOT NULL,
    estado smallint NOT NULL,
    CONSTRAINT pk_producto PRIMARY KEY (id_producto)
);

COMMENT ON TABLE public.producto
    IS 'TRIAL';

COMMENT ON COLUMN public.producto.id_producto
    IS 'TRIAL';

COMMENT ON COLUMN public.producto.nombre
    IS 'TRIAL';

COMMENT ON COLUMN public.producto.costo
    IS 'TRIAL';

COMMENT ON COLUMN public.producto.categoria
    IS 'TRIAL';

COMMENT ON COLUMN public.producto.marca
    IS 'TRIAL';

COMMENT ON COLUMN public.producto.precio
    IS 'TRIAL';

COMMENT ON COLUMN public.producto.existencia_min
    IS 'TRIAL';

COMMENT ON COLUMN public.producto.existencia_max
    IS 'TRIAL';

COMMENT ON COLUMN public.producto.estado
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.producto_detalle_ajuste
(
    id_detalle_ajuste integer NOT NULL,
    id_ajuste integer NOT NULL,
    id_producto integer NOT NULL,
    CONSTRAINT pk_producto_detalle_ajuste PRIMARY KEY (id_detalle_ajuste, id_ajuste, id_producto)
);

COMMENT ON TABLE public.producto_detalle_ajuste
    IS 'TRIAL';

COMMENT ON COLUMN public.producto_detalle_ajuste.id_detalle_ajuste
    IS 'TRIAL';

COMMENT ON COLUMN public.producto_detalle_ajuste.id_ajuste
    IS 'TRIAL';

COMMENT ON COLUMN public.producto_detalle_ajuste.id_producto
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.producto_detalle_compra
(
    id_producto integer NOT NULL,
    id_detalle_compra integer NOT NULL,
    id_compra integer NOT NULL,
    CONSTRAINT pk_producto_detalle_compra PRIMARY KEY (id_producto, id_detalle_compra, id_compra)
);

COMMENT ON TABLE public.producto_detalle_compra
    IS 'TRIAL';

COMMENT ON COLUMN public.producto_detalle_compra.id_producto
    IS 'TRIAL';

COMMENT ON COLUMN public.producto_detalle_compra.id_detalle_compra
    IS 'TRIAL';

COMMENT ON COLUMN public.producto_detalle_compra.id_compra
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.producto_detalle_factura
(
    id_producto integer NOT NULL,
    id_detalle_factura integer NOT NULL,
    id_factura integer NOT NULL,
    CONSTRAINT pk_producto_detalle_factura PRIMARY KEY (id_producto, id_detalle_factura, id_factura)
);

COMMENT ON TABLE public.producto_detalle_factura
    IS 'TRIAL';

COMMENT ON COLUMN public.producto_detalle_factura.id_producto
    IS 'TRIAL';

COMMENT ON COLUMN public.producto_detalle_factura.id_detalle_factura
    IS 'TRIAL';

COMMENT ON COLUMN public.producto_detalle_factura.id_factura
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.proveedor
(
    id_proveedor integer NOT NULL DEFAULT nextval('proveedor_id_proveedor_seq'::regclass),
    nombre character varying(45) COLLATE pg_catalog."default" NOT NULL,
    direccion character varying(45) COLLATE pg_catalog."default" NOT NULL,
    telefono character varying(45) COLLATE pg_catalog."default" NOT NULL,
    nombre_contacto_principal character varying(45) COLLATE pg_catalog."default" NOT NULL,
    estado smallint NOT NULL,
    CONSTRAINT pk_proveedor PRIMARY KEY (id_proveedor)
);

COMMENT ON TABLE public.proveedor
    IS 'TRIAL';

COMMENT ON COLUMN public.proveedor.id_proveedor
    IS 'TRIAL';

COMMENT ON COLUMN public.proveedor.nombre
    IS 'TRIAL';

COMMENT ON COLUMN public.proveedor.direccion
    IS 'TRIAL';

COMMENT ON COLUMN public.proveedor.telefono
    IS 'TRIAL';

COMMENT ON COLUMN public.proveedor.nombre_contacto_principal
    IS 'TRIAL';

COMMENT ON COLUMN public.proveedor.estado
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.rol
(
    id_rol integer NOT NULL,
    id_kardex integer NOT NULL,
    nombre character varying(45) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_rol PRIMARY KEY (id_rol)
);

COMMENT ON TABLE public.rol
    IS 'TRIAL';

COMMENT ON COLUMN public.rol.id_rol
    IS 'TRIAL';

COMMENT ON COLUMN public.rol.id_kardex
    IS 'TRIAL';

COMMENT ON COLUMN public.rol.nombre
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.rol_privilegio
(
    id_rol integer NOT NULL,
    id_kardex integer NOT NULL,
    id_privilegio integer NOT NULL,
    CONSTRAINT pk_rol_privilegio PRIMARY KEY (id_rol, id_kardex, id_privilegio)
);

COMMENT ON TABLE public.rol_privilegio
    IS 'TRIAL';

COMMENT ON COLUMN public.rol_privilegio.id_rol
    IS 'TRIAL';

COMMENT ON COLUMN public.rol_privilegio.id_kardex
    IS 'TRIAL';

COMMENT ON COLUMN public.rol_privilegio.id_privilegio
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.usuario
(
    id_usuario integer NOT NULL,
    nombre character varying(45) COLLATE pg_catalog."default" NOT NULL,
    apellido character varying(45) COLLATE pg_catalog."default" NOT NULL,
    email character varying(50) COLLATE pg_catalog."default" NOT NULL,
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_usuario PRIMARY KEY (id_usuario)
);

COMMENT ON TABLE public.usuario
    IS 'TRIAL';

COMMENT ON COLUMN public.usuario.id_usuario
    IS 'TRIAL';

COMMENT ON COLUMN public.usuario.nombre
    IS 'TRIAL';

COMMENT ON COLUMN public.usuario.apellido
    IS 'TRIAL';

COMMENT ON COLUMN public.usuario.email
    IS 'TRIAL';

COMMENT ON COLUMN public.usuario.username
    IS 'TRIAL';

CREATE TABLE IF NOT EXISTS public.usuario_rol
(
    id_usuario integer NOT NULL,
    id_rol integer NOT NULL,
    CONSTRAINT pk_usuario_rol PRIMARY KEY (id_usuario, id_rol)
);

COMMENT ON TABLE public.usuario_rol
    IS 'TRIAL';

COMMENT ON COLUMN public.usuario_rol.id_usuario
    IS 'TRIAL';

COMMENT ON COLUMN public.usuario_rol.id_rol
    IS 'TRIAL';

ALTER TABLE IF EXISTS public.compra
    ADD CONSTRAINT fk_proveedor_compra_p FOREIGN KEY (id_proveedor)
    REFERENCES public.proveedor (id_proveedor) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fk_proveedor_compra_p_idx
    ON public.compra(id_proveedor);


ALTER TABLE IF EXISTS public.detalle_ajuste
    ADD CONSTRAINT fk_ajuste_detalle_ajuste FOREIGN KEY (id_ajuste)
    REFERENCES public.ajuste (id_ajuste) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fk_ajuste_detalle_ajuste_idx
    ON public.detalle_ajuste(id_ajuste);


ALTER TABLE IF EXISTS public.detalle_compra
    ADD CONSTRAINT fk_compra_detalle_compra FOREIGN KEY (id_compra)
    REFERENCES public.compra (id_compra) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fk_compra_detalle_compra_idx
    ON public.detalle_compra(id_compra);


ALTER TABLE IF EXISTS public.detalle_factura
    ADD CONSTRAINT fk_factura_detalle_factura FOREIGN KEY (id_factura)
    REFERENCES public.factura (id_factura) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fk_factura_detalle_factura_idx
    ON public.detalle_factura(id_factura);


ALTER TABLE IF EXISTS public.factura
    ADD CONSTRAINT fk_factura_cliente FOREIGN KEY (id_cliente)
    REFERENCES public.cliente (id_cliente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fk_factura_cliente1_idx
    ON public.factura(id_cliente);


ALTER TABLE IF EXISTS public.kardex
    ADD CONSTRAINT fk_kardex_producto FOREIGN KEY (id_producto)
    REFERENCES public.producto (id_producto) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fk_kardex_producto1_idx
    ON public.kardex(id_producto);


ALTER TABLE IF EXISTS public.privilegio
    ADD CONSTRAINT fk_kardex_privilegio_k FOREIGN KEY (id_kardex)
    REFERENCES public.kardex (id_kardex) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fk_kardex_privilegio_p_idx
    ON public.privilegio(id_kardex);


ALTER TABLE IF EXISTS public.producto_detalle_ajuste
    ADD CONSTRAINT fk_id_detalle_ajuste FOREIGN KEY (id_ajuste, id_detalle_ajuste)
    REFERENCES public.detalle_ajuste (id_ajuste, id_detalle_ajuste) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.producto_detalle_ajuste
    ADD CONSTRAINT fk_id_producto_ajuste FOREIGN KEY (id_producto)
    REFERENCES public.producto (id_producto) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fk_id_producto_idx
    ON public.producto_detalle_ajuste(id_producto);


ALTER TABLE IF EXISTS public.producto_detalle_compra
    ADD CONSTRAINT fk_id_detalle_compra FOREIGN KEY (id_compra, id_detalle_compra)
    REFERENCES public.detalle_compra (id_compra, id_detalle_compra) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fk_id_detalle_compra_idx
    ON public.producto_detalle_compra(id_compra, id_detalle_compra);


ALTER TABLE IF EXISTS public.producto_detalle_compra
    ADD CONSTRAINT fk_id_producto_compra FOREIGN KEY (id_producto)
    REFERENCES public.producto (id_producto) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.producto_detalle_factura
    ADD CONSTRAINT fk_id_detalle_factura FOREIGN KEY (id_factura, id_detalle_factura)
    REFERENCES public.detalle_factura (id_factura, id_detalle_factura) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fk_id_detalle_factura_idx
    ON public.producto_detalle_factura(id_factura, id_detalle_factura);


ALTER TABLE IF EXISTS public.producto_detalle_factura
    ADD CONSTRAINT fk_id_producto_factura FOREIGN KEY (id_producto)
    REFERENCES public.producto (id_producto) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.rol
    ADD CONSTRAINT fk_kardex_rol_k FOREIGN KEY (id_kardex)
    REFERENCES public.kardex (id_kardex) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fk_rol_kardex_idx
    ON public.rol(id_kardex);


ALTER TABLE IF EXISTS public.rol_privilegio
    ADD CONSTRAINT fk_id_privilegio FOREIGN KEY (id_kardex, id_privilegio)
    REFERENCES public.privilegio (id_kardex, id_privilegio) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fk_id_privilegio_idx
    ON public.rol_privilegio(id_kardex, id_privilegio);


ALTER TABLE IF EXISTS public.rol_privilegio
    ADD CONSTRAINT fk_id_rol_privilegio_r FOREIGN KEY (id_rol)
    REFERENCES public.rol (id_rol) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.usuario_rol
    ADD CONSTRAINT fk_id_rol_usuario FOREIGN KEY (id_rol)
    REFERENCES public.rol (id_rol) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS fk_id_rol_usuario_idx
    ON public.usuario_rol(id_rol);


ALTER TABLE IF EXISTS public.usuario_rol
    ADD CONSTRAINT fk_id_usuario FOREIGN KEY (id_usuario)
    REFERENCES public.usuario (id_usuario) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;

END;